@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using System.Linq
@using Hangfire.Dashboard.Pages
@using Hangfire.JobKits
@using Hangfire.JobKits.Dashboard.Controls
@using Hangfire.JobKits.Worker
@using Hangfire.JobKits.Resources
@using Hangfire.Storage;
@using System.Collections.Concurrent;
@inherits Hangfire.Dashboard.RazorPage

@{
    Layout = new LayoutPage(Strings.Monitor_Title);

    string selectedCategory = this.SelectedCategory;
    MonitorMap jobMap = this.Map;
    JobKitOptions options = this.Options;

    var availableJobs = jobMap.JobCollection.ContainsKey(selectedCategory)
        ? jobMap.JobCollection[selectedCategory]
        : new List<MonitorJob>();

    var format = selectedCategory == "Daily"
        ? "HH:mm" : "MM-dd HH:mm";


}

<link rel="stylesheet" type="text/css" href="@Url.To(JobKitRoute.Monitor.CssUrl)" />
<script type="text/javascript">
    var launchUrl = '@Url.To(JobKitRoute.Monitor.LaunchUrl)';
    var recurringUrl = '@Url.To(JobKitRoute.Monitor.LaunchRecurringUrl)';
    var jobLinkBaseUrl = '@Url.JobDetails("")';
    
</script>
<script type="text/javascript" src="@Url.To(JobKitRoute.Monitor.JsUrl)"></script>

<div class="row">
    <div class="col-md-3">
        @SidebarControlFromMonitor.Render(Html, selectedCategory, jobMap)
    </div>
    <h1 class="page-header">@(Strings.Monitor_Title)</h1>
    <div class="col-md-9">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>名稱</th>
                        <th class="min-width">Cron</th>
                        <th>工作</th>
                        <th class="align-right min-width">監控時間</th>
                        <th class="align-right min-width">執行時間</th>
                        <th class="align-right min-width">執行狀態</th>
                        <th class="min-width"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var job in availableJobs.OrderBy(x => x.MonitorTime))
                    {
                        var jobStatus = job.GetStatus(Storage);

                        <tr class="js-jobs-list-row hover">
                            <td class="word-break width-15">@job.Name</td>
                            <td class="word-break width-15"><code>@job.Cron</code></td>
                            <td class="align-right min-width">@job.ActionName </td>
                            <td class="align-right min-width">@job.MonitorTime.ToLocalTime().ToString(format)  </td>
                            <td class="align-right min-width">@(jobStatus.ExecutedTime.HasValue ? jobStatus.ExecutedTime.Value.ToLocalTime().ToString(format) : "-" )</td>
                            <td class="align-right min-width">
                                <label class="label label-default">@(jobStatus.Status.ToString())</label>
                            </td>
                            <td class="min-width">
                                
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
